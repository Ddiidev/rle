;FUNCTION
;				RLE(), repeatLet()[internal], isNumeric()[internal]
;
;AUTHOR			André Luiz (AlsCompanny@gmail.com)
;
;CONTRIBUTORS	André Luiz
;				I wanted to bring a functional compression to the KiXtart language.
;				I intend to bring in other algorithms of more efficient compression,
;				Remembering it is based on character!!
;				https://alscompanny.blogspot.com.br/2017/12/rle-compressorbiblioteca.html
;
;ACTION			Reduces the redundancy of a string.
;
;SYNTAX		
;				RLE([STRING], [MODE], [optional IDENTIFIER])
;
;VERSION		1.0.0.0
;DATE CREATED	22/12/2017
;DATE MODIFIED	27/12/2017
;
;PARAMETERS 	
;				Parameters 1
;				Input text{STRING}
;
;				Parameters 2
;				Mode (compress/decompress){INTEGER}
;
;				Parameters 3
;				Replay identifier{char}
;
;REMARKS		RLE is not the best compression method, but it can serve
;				BMP and JPG files, etc... you can search for a solution,
;				I just wanted to contribute to a library of this genre.
;
;RETURNS
;		RLE()
;			@Error = 0	;;OK;
;			@Error = 1	;;Problem with "mode";
;			@Error = -1	;;The repeat character must be a single letter;
;			@Error = -2	;;The number of characters is less than 4;
;
;DEPENDENCIES
;		repeatLet()[Already included],
;		isNumeric()[Already included]
;
;KIXTART VER	4.50
; 
;Example(s)		
;
;		"ORIGINAL   : KiiiiiXXXtarttttt"?
;		"COMPRESS   : "RLE("KiiiiiXXXtarttttt", 1,'*')? ;;return: Ki*5XXXtart*5
;		"DECOMPRESS : "RLE("Ki*5XXXtart*5",0,'*')? ;;return: KiiiiiXXXtarttttt
;		get$
;
;Source
;
function RLE($texto, optional $mode, optional $null)
	;;DECLARAÇÕES
	dim
		$i, $textoFinal, $charAtual
	;;VERIFICANDO CARACTERE DE REPETIÇÃO.
	if (trim($null) = '')
		$null = chr(4)
	else
		if (len($null) > 1) exit -1 endif
	endif

	;;VERIFICANDO SE É UM MODO ACEITO.

	if (trim($mode) = '')
		$mode = 1
	else if not (($mode = 0) or ($mode = 1))
			exit 1
	endif endif

	if $mode
		/*	##	COMPRESSOR	##	*/
		if (len($texto) < 4) exit -2 endif
		dim
			$charAntigo, $sequenceChar
		$sequenceChar	= 0
		$charAntigo		= ''
		for $i=1 to len($texto)+1
			$charAtual	= substr($texto, $i, 1)
			if not ($charAtual == $charAntigo) and ($sequenceChar < 1)
				$textoFinal		= $textoFinal + $charAtual
				$charAntigo		= $charAtual
				$sequenceChar	= 0
			else
				if not ($charAtual == $charAntigo)
					if ($sequenceChar > 3)
						$textoFinal = $textoFinal + $null + cstr($sequenceChar+1)
					else
						$textoFinal = $textoFinal + repeatLet(right($textoFinal, 1), $sequenceChar)
					endif
					if ($i < len($texto)) $i=$i-1 endif
					$sequenceChar = 0
				else
					$sequenceChar = $sequenceChar+1
				endif
			endif
		next
	else
		/*	##	DES-COMPRESSOR	##	*/
		dim
			$charProximo, $x,
			$count, $char
		for $i=1 to len($texto)
			$charAtual	= substr($texto, $i, 1)
			$charProximo= substr($texto, $i+1, 1)
			if ($charProximo <> $null) 
				;;CARACTERE NATURAL.
				$textoFinal = $textoFinal + $charAtual
			else
				;;CARACTERE DE COMPRESSÃO.
				for $x=($i+2) to len($texto)
					$char	= substr($texto, $x, 1)
					if isNumeric($char)
						$count = $count + cstr($char)
					else
						$x = len($texto)
					endif
				next
				$textoFinal = $textoFinal + repeatLet($charAtual, cint($count))
				$count = ''
				$i=$i+len($count)+2
			endif
		next
	endif
	$RLE = $textoFinal
	exit 0
endfunction

function repeatLet($let, $repeat)
	dim $i
	for $i=1 to $repeat
		$repeatLet = $repeatLet + $let
	next
endfunction

function isNumeric($args)
	$args		= asc($args)
	$isNumeric	= ($args >= 48) and ($args <= 57)
endfunction